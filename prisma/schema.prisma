generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model car_info {
  vehicle_id         Int                  @id @default(autoincrement()) @db.UnsignedInt
  vin                String               @db.VarChar(50)
  vehicle_model      String               @db.VarChar(20)
  register_date      DateTime             @db.DateTime(0)
  purchase_date      DateTime             @db.DateTime(0)
  mileage            Decimal              @db.Decimal(5, 2)
  create_time        DateTime?            @db.DateTime(0)
  update_time        DateTime?            @db.DateTime(0)
  cost_management    cost_management[]
  revenue_management revenue_management[]

  @@index([vehicle_model], map: "vehicle_model")
  @@index([vin], map: "vin")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model cost_management {
  cost_id       Int       @id @default(autoincrement()) @db.UnsignedInt
  vehicle_id    Int       @db.UnsignedInt
  amount        Decimal   @db.Decimal(10, 2)
  remark        String    @db.VarChar(255)
  type          String    @db.VarChar(20)
  payment_phase Int       @db.UnsignedInt
  create_time   DateTime? @db.DateTime(0)
  update_time   DateTime? @db.DateTime(0)
  payment_date  DateTime  @db.DateTime(0)
  car_info      car_info  @relation(fields: [vehicle_id], references: [vehicle_id])

  @@index([remark], map: "remark")
  @@index([type], map: "type")
  @@index([vehicle_id], map: "vehicle_id")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model operation_log {
  log_id      Int       @id @default(autoincrement()) @db.UnsignedInt
  user_id     Int       @db.UnsignedInt
  action_type String    @db.VarChar(20)
  details     String?   @db.Text
  ip_address  String?   @db.VarChar(45)
  create_time DateTime? @default(now()) @db.DateTime(0)

  @@index([user_id], map: "user_id")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model sale_info {
  sale_id      Int       @id @default(autoincrement()) @db.UnsignedInt
  vehicle_id   Int       @db.UnsignedInt
  sale_price   Decimal   @db.Decimal(5, 2)
  sale_date    DateTime  @db.DateTime(0)
  buyer_info   String    @db.VarChar(255)
  create_time  DateTime? @db.DateTime(0)
  update_time  DateTime? @db.DateTime(0)
  sale_remark  String?   @db.Text
  sale_status  Bytes     @db.TinyBlob
  payment_type String    @db.VarChar(20)

  @@index([buyer_info], map: "buyer_info")
  @@index([vehicle_id], map: "vehicle_id")
}

/// 收入管理表
model revenue_management {
  revenue_id    Int       @id @default(autoincrement()) @db.UnsignedInt
  vehicle_id    Int       @db.UnsignedInt
  amount        Decimal   @db.Decimal(10, 2)
  remark        String    @db.VarChar(255)
  revenue_phase Int       @db.UnsignedTinyInt
  payment_date  DateTime  @db.DateTime(0)
  create_time   DateTime? @default(now()) @db.DateTime(0)
  update_time   DateTime? @updatedAt @db.DateTime(0)
  car_info      car_info  @relation(fields: [vehicle_id], references: [vehicle_id])

  @@index([vehicle_id], map: "vehicle_id")
  @@index([remark], map: "remark")
}

model user {
  user_id     Int       @id @default(autoincrement()) @db.UnsignedInt
  username    String    @unique(map: "username") @db.VarChar(50)
  password    String    @db.VarChar(100)
  role_id     Int       @db.UnsignedInt
  create_time DateTime? @default(now()) @db.DateTime(0)
  role        role      @relation("UserRole", fields: [role_id], references: [role_id], onDelete: NoAction, onUpdate: NoAction)

  @@index([role_id])
}

model role {
  role_id     Int               @id @default(autoincrement()) @db.UnsignedInt
  role_name   String            @db.VarChar(50)
  role_key    String            @unique @db.VarChar(50)
  description String?           @db.VarChar(255)
  status      Int               @default(1) @db.TinyInt
  create_time DateTime?         @default(now()) @db.DateTime(0)
  update_time DateTime?         @updatedAt @db.DateTime(0)
  permissions role_permission[] @relation("RolePermissions")
  users       user[]            @relation("UserRole")
}

model permission {
  permission_id   Int               @id @default(autoincrement()) @db.UnsignedInt
  parent_id       Int?              @db.UnsignedInt
  permission_name String            @db.VarChar(50)
  permission_key  String            @unique @db.VarChar(50)
  permission_type String            @db.VarChar(20)
  path            String?           @db.VarChar(255)
  component       String?           @db.VarChar(255)
  icon            String?           @db.VarChar(50)
  sort_order      Int               @default(0)
  status          Int               @default(1) @db.TinyInt
  create_time     DateTime?         @default(now()) @db.DateTime(0)
  update_time     DateTime?         @db.DateTime(0)
  roles           role_permission[] @relation("PermissionRoles")
}

model role_permission {
  role_id       Int        @db.UnsignedInt
  permission_id Int        @db.UnsignedInt
  create_time   DateTime?  @default(now()) @db.DateTime(0)
  permission    permission @relation("PermissionRoles", fields: [permission_id], references: [permission_id], onDelete: NoAction, onUpdate: NoAction)
  role          role       @relation("RolePermissions", fields: [role_id], references: [role_id], onDelete: NoAction, onUpdate: NoAction)

  @@id([role_id, permission_id])
  @@index([permission_id])
}
